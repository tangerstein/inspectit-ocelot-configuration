inspectit:

  # settings regarding the instrumentation performed on the target application
  instrumentation:
    #definitions of commonly used actions
    actions:

      # takes the input "value" and just returns it
      set:
        input:
          value: Object
        value: value

      # simply returns null
      setNull:
        value: 'null'

      #returns the "value" input if it is not null, otherwise returns "elseValue"
      getOrElse:
        input:
          value: Object
          elseValue: Object
        value: "value == null ? elseValue : value"

      string_replace_all:
        input:
          regex: String
          replacement: String
          string: String
        value: string.replaceAll(regex,replacement)

      #computes a nanosecond-timestamp as a long for the current point in time
      timestamp_nanos:
        value: "new Long(System.nanoTime())"

      #computes the elapsed milliseconds as double since a given nanosecond-timestamp
      elapsed_millis:
        input:
          #the timestamp captured via System.nanoTime() to compare against
          sinceNanos: long
        value: "new Double( (System.nanoTime() - sinceNanos) * 1E-6)"

      get_method_fqn:
        input:
          _methodName: String
          _class: Class
        value: new StringBuilder(_class.getName()).append('.').append(_methodName).toString()

      # adds a marker flag to the current context, if it has not already been set
      # the corresponding marker should be configured for down propagation
      # returns true if the marker was not set previously, false otherwise
      test_and_set_marker:
        input:
          _context: InspectitContext
          marker: String
        value-body: |
          if(_context.getData(marker) == null) {
            _context.setData(marker, Boolean.TRUE);
            return Boolean.TRUE;
          } else {
            return Boolean.FALSE;
          }
      # adds a marker flag to a given target object
      # returns true if the marker was not set previously, false otherwise
      test_and_set_object_marker:
        input:
          _attachments: ObjectAttachments
          target: Object
          marker: String
        value-body: |
          Object previous = _attachments.attach(target, marker, Boolean.TRUE);
          if(previous == null) {
            return Boolean.TRUE;
          } else {
            return Boolean.FALSE;
          }

      # reads a given attachment from a target object
      read_attachment:
        input:
          _attachments: ObjectAttachments
          target: Object
          key: String
        value: _attachments.getAttachment(target, key)

      # replaces a given attachment of a target object with a new one, returns the previous value
      replace_attachment:
        input:
          _attachments: ObjectAttachments
          target: Object
          key: String
          value: Object
        value: _attachments.attach(target, key, value)


      # removes a given attachment from a target object, returning the previously attached value
      remove_attachment:
        input:
          _attachments: ObjectAttachments
          target: Object
          key: String
        value: _attachments.attach(target, key, null)